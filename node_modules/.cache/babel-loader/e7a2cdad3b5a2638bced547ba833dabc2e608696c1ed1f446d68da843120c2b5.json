{"ast":null,"code":"var _jsxFileName = \"C:\\\\works\\\\project\\\\group--\\\\client\\\\src\\\\components\\\\Navbar2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction YourComponent() {\n  _s();\n  const [isScrolled, setIsScrolled] = useState(false);\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerWidth < 992) {\n        if (window.scrollY > 55) {\n          setIsScrolled(true);\n        } else {\n          setIsScrolled(false);\n        }\n      } else {\n        if (window.scrollY > 55) {\n          setIsScrolled(true);\n        } else {\n          setIsScrolled(false);\n        }\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []); // useEffect는 컴포넌트가 처음 마운트될 때 한 번만 실행되도록 빈 배열을 전달합니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isScrolled ? 'fixed-top shadow' : 'fixed-top',\n    style: {\n      top: isScrolled ? '-55px' : '0'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(YourComponent, \"UCaI8lpZVGvPrsRoIFYRt2wv0+o=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","YourComponent","_s","isScrolled","setIsScrolled","handleScroll","window","innerWidth","scrollY","addEventListener","removeEventListener","className","style","top","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/works/project/group--/client/src/components/Navbar2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction YourComponent() {\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (window.innerWidth < 992) {\r\n        if (window.scrollY > 55) {\r\n          setIsScrolled(true);\r\n        } else {\r\n          setIsScrolled(false);\r\n        }\r\n      } else {\r\n        if (window.scrollY > 55) {\r\n          setIsScrolled(true);\r\n        } else {\r\n          setIsScrolled(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []); // useEffect는 컴포넌트가 처음 마운트될 때 한 번만 실행되도록 빈 배열을 전달합니다.\r\n\r\n  return (\r\n    <div className={isScrolled ? 'fixed-top shadow' : 'fixed-top'} style={{ top: isScrolled ? '-55px' : '0' }}>\r\n      {/* 네비게이션 내용 */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YourComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIC,MAAM,CAACC,UAAU,GAAG,GAAG,EAAE;QAC3B,IAAID,MAAM,CAACE,OAAO,GAAG,EAAE,EAAE;UACvBJ,aAAa,CAAC,IAAI,CAAC;QACrB,CAAC,MAAM;UACLA,aAAa,CAAC,KAAK,CAAC;QACtB;MACF,CAAC,MAAM;QACL,IAAIE,MAAM,CAACE,OAAO,GAAG,EAAE,EAAE;UACvBJ,aAAa,CAAC,IAAI,CAAC;QACrB,CAAC,MAAM;UACLA,aAAa,CAAC,KAAK,CAAC;QACtB;MACF;IACF,CAAC;IAEDE,MAAM,CAACG,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IAC/C,OAAO,MAAM;MACXC,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKW,SAAS,EAAER,UAAU,GAAG,kBAAkB,GAAG,WAAY;IAACS,KAAK,EAAE;MAAEC,GAAG,EAAEV,UAAU,GAAG,OAAO,GAAG;IAAI;EAAE;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAErG,CAAC;AAEV;AAACf,EAAA,CA/BQD,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAiCtB,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}