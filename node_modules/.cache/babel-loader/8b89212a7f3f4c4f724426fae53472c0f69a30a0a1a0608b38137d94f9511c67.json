{"ast":null,"code":"var _jsxFileName = \"C:\\\\works\\\\project\\\\group--\\\\client\\\\src\\\\components\\\\products\\\\ProductUp.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttonStyle = {\n  backgroundColor: 'orange',\n  border: 'none',\n  borderRadius: '8px',\n  padding: '15px 30px',\n  textDecoration: 'none',\n  color: 'white',\n  fontSize: '1.5em',\n  transition: 'background-color 0.3s ease'\n};\nconst hoverStyle = {\n  backgroundColor: 'lightgray'\n};\nfunction ProductUp() {\n  _s();\n  const [isHovered, setIsHovered] = React.useState(false);\n  const navigate = useNavigate();\n  const [isUserLoggedIn, setIsUserLoggedIn] = React.useState(false); // 로그인 상태 상태값\n\n  // 로그인 여부 확인\n  React.useEffect(() => {\n    // 실제로는 로그인 여부를 확인하는 로직을 구현해야 합니다.\n\n    setIsUserLoggedIn(false); // 로그인 되어있으면 true, 아니면 false\n  }, []);\n\n  // 상품 등록 버튼 클릭 핸들러\n  const handleClick = () => {\n    // 로그인되어 있지 않은 경우 알림창을 띄우고 확인을 누르면 로그인 페이지로 이동\n    if (!isUserLoggedIn) {\n      const confirmed = window.confirm('로그인이 필요합니다. 로그인 하시겠습니까?');\n      if (confirmed) {\n        navigate('/login'); // 로그인 페이지 경로로 리다이렉트\n      }\n    } else {\n      navigate('/product-registration'); // 로그인된 경우 상품 등록 페이지로 이동\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        ...buttonStyle,\n        ...(isHovered && hoverStyle)\n      },\n      onMouseEnter: () => setIsHovered(true),\n      onMouseLeave: () => setIsHovered(false),\n      onClick: handleClick,\n      children: \"\\uC0C1\\uD488 \\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ProductUp, \"lmgyuheOWwJrRFJkqqMNmsSnSCI=\", false, function () {\n  return [useNavigate];\n});\n_c = ProductUp;\nexport default ProductUp;\nvar _c;\n$RefreshReg$(_c, \"ProductUp\");","map":{"version":3,"names":["React","useNavigate","jsxDEV","_jsxDEV","buttonStyle","backgroundColor","border","borderRadius","padding","textDecoration","color","fontSize","transition","hoverStyle","ProductUp","_s","isHovered","setIsHovered","useState","navigate","isUserLoggedIn","setIsUserLoggedIn","useEffect","handleClick","confirmed","window","confirm","children","style","onMouseEnter","onMouseLeave","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/works/project/group--/client/src/components/products/ProductUp.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst buttonStyle = {\r\n  backgroundColor: 'orange',\r\n  border: 'none',\r\n  borderRadius: '8px',\r\n  padding: '15px 30px',\r\n  textDecoration: 'none',\r\n  color: 'white',\r\n  fontSize: '1.5em',\r\n  transition: 'background-color 0.3s ease',\r\n};\r\n\r\nconst hoverStyle = {\r\n  backgroundColor: 'lightgray',\r\n};\r\n\r\nfunction ProductUp() {\r\n  const [isHovered, setIsHovered] = React.useState(false);\r\n  const navigate = useNavigate();\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = React.useState(false); // 로그인 상태 상태값\r\n\r\n  // 로그인 여부 확인\r\n  React.useEffect(() => {\r\n    // 실제로는 로그인 여부를 확인하는 로직을 구현해야 합니다.\r\n\r\n    setIsUserLoggedIn(false); // 로그인 되어있으면 true, 아니면 false\r\n  }, []);\r\n\r\n  // 상품 등록 버튼 클릭 핸들러\r\n  const handleClick = () => {\r\n    // 로그인되어 있지 않은 경우 알림창을 띄우고 확인을 누르면 로그인 페이지로 이동\r\n    if (!isUserLoggedIn) {\r\n      const confirmed = window.confirm('로그인이 필요합니다. 로그인 하시겠습니까?');\r\n      if (confirmed) {\r\n        navigate('/login'); // 로그인 페이지 경로로 리다이렉트\r\n      }\r\n    } else {\r\n      navigate('/product-registration'); // 로그인된 경우 상품 등록 페이지로 이동\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        style={{ ...buttonStyle, ...(isHovered && hoverStyle) }}\r\n        onMouseEnter={() => setIsHovered(true)}\r\n        onMouseLeave={() => setIsHovered(false)}\r\n        onClick={handleClick}\r\n      >\r\n        상품 등록\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductUp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAG;EAClBC,eAAe,EAAE,QAAQ;EACzBC,MAAM,EAAE,MAAM;EACdC,YAAY,EAAE,KAAK;EACnBC,OAAO,EAAE,WAAW;EACpBC,cAAc,EAAE,MAAM;EACtBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,UAAU,GAAG;EACjBR,eAAe,EAAE;AACnB,CAAC;AAED,SAASS,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,KAAK,CAACkB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMC,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,KAAK,CAACkB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnE;EACAlB,KAAK,CAACsB,SAAS,CAAC,MAAM;IACpB;;IAEAD,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,IAAI,CAACH,cAAc,EAAE;MACnB,MAAMI,SAAS,GAAGC,MAAM,CAACC,OAAO,CAAC,yBAAyB,CAAC;MAC3D,IAAIF,SAAS,EAAE;QACbL,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;MACtB;IACF,CAAC,MAAM;MACLA,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAC;IACrC;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAwB,QAAA,eACExB,OAAA;MACEyB,KAAK,EAAE;QAAE,GAAGxB,WAAW;QAAE,IAAIY,SAAS,IAAIH,UAAU;MAAE,CAAE;MACxDgB,YAAY,EAAEA,CAAA,KAAMZ,YAAY,CAAC,IAAI,CAAE;MACvCa,YAAY,EAAEA,CAAA,KAAMb,YAAY,CAAC,KAAK,CAAE;MACxCc,OAAO,EAAER,WAAY;MAAAI,QAAA,EACtB;IAED;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACpB,EAAA,CArCQD,SAAS;EAAA,QAECb,WAAW;AAAA;AAAAmC,EAAA,GAFrBtB,SAAS;AAuClB,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}